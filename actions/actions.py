# This files contains your custom actions which can be used to run
# custom Python code.
#
# See this guide on how to implement these action:
# https://rasa.com/docs/rasa/custom-actions

from typing import Any, Text, Dict, List
from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
from rasa_sdk.events import SlotSet, AllSlotsReset, FollowupAction

import logging
from . import utils
from . import crypto_utils

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

from typing import Any, Text, Dict, List
from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
from rasa_sdk.events import SlotSet, AllSlotsReset, FollowupAction

class ActionValidateWalletAddress(Action):
    def name(self) -> Text:
        return "action_validate_wallet_address"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        
        wallet_address = tracker.get_slot("wallet_address")
        logger.info(f"Validating wallet address: {wallet_address}")
        
        network_type = None
        is_valid = False
        
        if wallet_address:
            # Use the validation utility from utils.py
            is_valid, detected_network = utils.validate_crypto_address(wallet_address)
            if is_valid:
                network_type = detected_network
                logger.info(f"Address {wallet_address} validated as {network_type} address")
            
        if is_valid:
            contact_name = tracker.get_slot("contact_name")
            network_info = f" ({network_type})" if network_type else ""
            dispatcher.utter_message(text=f"I've added {contact_name} with address {wallet_address}{network_info} to your contacts. üéâ")
            dispatcher.utter_message(text="Would you like to add a nickname or note for this contact?")
            return [SlotSet("address_valid", True), SlotSet("network_type", network_type)]
        else:
            dispatcher.utter_message(text="That doesn't seem to be a valid wallet address. Please check and try again.")
            return [SlotSet("address_valid", False)]

class ActionResetContactSlots(Action):
    def name(self) -> Text:
        return "action_reset_contact_slots"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        
        return [SlotSet("contact_name", None), 
                SlotSet("wallet_address", None), 
                SlotSet("network_type", None),
                SlotSet("address_valid", None)]

# New actions using CryptoBERT

class ActionAnalyzeSentiment(Action):
    def name(self) -> Text:
        return "action_analyze_sentiment"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        
        # Get the last user message
        message = tracker.latest_message.get('text')
        logger.info(f"Analyzing sentiment for: {message}")
        
        sentiment, confidence = crypto_utils.analyze_crypto_sentiment(message)
        logger.info(f"Sentiment analysis result: {sentiment}, confidence: {confidence}")
        
        if sentiment == "positive":
            dispatcher.utter_message(text=f"T√¥i nh·∫≠n th·∫•y b·∫°n c√≥ quan ƒëi·ªÉm t√≠ch c·ª±c v·ªÅ ch·ªß ƒë·ªÅ n√†y! üìà")
        elif sentiment == "negative":
            dispatcher.utter_message(text=f"C√≥ v·∫ª b·∫°n ƒëang lo l·∫Øng v·ªÅ ƒëi·ªÅu n√†y. T√¥i c√≥ th·ªÉ gi√∫p g√¨ kh√¥ng? üìâ")
        else:
            dispatcher.utter_message(text=f"C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª quan ƒëi·ªÉm c·ªßa m√¨nh.")
        
        return [SlotSet("sentiment", sentiment),
                SlotSet("sentiment_confidence", confidence)]

class ActionDetectScam(Action):
    def name(self) -> Text:
        return "action_detect_scam"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        
        # Get crypto description from slot
        description = tracker.get_slot("crypto_description")
        if not description:
            dispatcher.utter_message(text="B·∫°n c√≥ th·ªÉ m√¥ t·∫£ d·ª± √°n/token ƒë√≥ kh√¥ng?")
            return []
        
        logger.info(f"Analyzing potential scam: {description}")
        is_scam, probability, indicators = crypto_utils.detect_crypto_scam(description)
        logger.info(f"Scam detection result: {is_scam}, probability: {probability}, indicators: {indicators}")
        
        if is_scam:
            dispatcher.utter_message(text="‚ö†Ô∏è C·∫£nh b√°o! D·ª± √°n n√†y c√≥ m·ªôt s·ªë d·∫•u hi·ªáu ƒë√°ng ng·ªù:")
            if indicators:
                dispatcher.utter_message(text="- " + "\n- ".join(indicators))
            dispatcher.utter_message(text="H√£y c·∫©n th·∫≠n v√† lu√¥n nghi√™n c·ª©u k·ªπ tr∆∞·ªõc khi ƒë·∫ßu t∆∞.")
        else:
            dispatcher.utter_message(text="T√¥i kh√¥ng ph√°t hi·ªán c√°c d·∫•u hi·ªáu l·ª´a ƒë·∫£o r√µ r√†ng, nh∆∞ng v·∫´n n√™n nghi√™n c·ª©u th√™m.")
        
        return [SlotSet("scam_probability", probability)]

class ActionClassifyTopic(Action):
    def name(self) -> Text:
        return "action_classify_topic"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        
        # Get the last user message
        message = tracker.latest_message.get('text')
        logger.info(f"Classifying topic for: {message}")
        
        topic, confidence = crypto_utils.classify_crypto_topic(message)
        logger.info(f"Topic classification result: {topic}, confidence: {confidence}")
        
        # Route based on topic
        if topic == "investment":
            dispatcher.utter_message(text="T√¥i th·∫•y b·∫°n ƒëang n√≥i v·ªÅ ƒë·∫ßu t∆∞ ti·ªÅn ƒëi·ªán t·ª≠. T√¥i c√≥ th·ªÉ gi√∫p g√¨ kh√¥ng?")
        elif topic == "technical":
            dispatcher.utter_message(text="ƒê√¢y l√† m·ªôt c√¢u h·ªèi k·ªπ thu·∫≠t v·ªÅ blockchain. T√¥i s·∫Ω c·ªë g·∫Øng gi·∫£i th√≠ch r√µ r√†ng.")
        elif topic == "security":
            dispatcher.utter_message(text="B·∫£o m·∫≠t l√† v·∫•n ƒë·ªÅ r·∫•t quan tr·ªçng trong ti·ªÅn ƒëi·ªán t·ª≠. H√£y ƒë·∫£m b·∫£o b·∫°n lu√¥n th·ª±c hi·ªán c√°c bi·ªán ph√°p ph√≤ng ng·ª´a.")
        else:
            dispatcher.utter_message(text="T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªõi nhi·ªÅu ch·ªß ƒë·ªÅ v·ªÅ ti·ªÅn ƒëi·ªán t·ª≠. B·∫°n quan t√¢m ƒë·∫øn kh√≠a c·∫°nh n√†o?")
        
        return [SlotSet("query_topic", topic)]

class ActionUpdateUserExpertise(Action):
    def name(self) -> Text:
        return "action_update_user_expertise"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        
        # Get the last user message
        message = tracker.latest_message.get('text')
        logger.info(f"Determining expertise level for: {message}")
        
        expertise, confidence = crypto_utils.determine_expertise_level(message)
        logger.info(f"Expertise level result: {expertise}, confidence: {confidence}")
        
        # Customize response based on expertise
        if expertise == "beginner":
            dispatcher.utter_message(text="T√¥i s·∫Ω ƒë∆°n gi·∫£n h√≥a c√°c gi·∫£i th√≠ch c·ªßa m√¨nh ƒë·ªÉ gi√∫p b·∫°n hi·ªÉu r√µ h∆°n.")
        elif expertise == "expert":
            dispatcher.utter_message(text="T√¥i th·∫•y b·∫°n ƒë√£ c√≥ hi·ªÉu bi·∫øt s√¢u s·∫Øc v·ªÅ ti·ªÅn ƒëi·ªán t·ª≠. T√¥i s·∫Ω cung c·∫•p c√°c chi ti·∫øt chuy√™n s√¢u h∆°n.")
        else:
            dispatcher.utter_message(text="T√¥i s·∫Ω cung c·∫•p th√¥ng tin c√¢n b·∫±ng gi·ªØa c∆° b·∫£n v√† chuy√™n s√¢u.")
        
        return [SlotSet("expertise_level", expertise)]

class ActionExtractCryptoEntities(Action):
    def name(self) -> Text:
        return "action_extract_crypto_entities"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        
        # Get the last user message
        message = tracker.latest_message.get('text')
        logger.info(f"Extracting crypto entities from: {message}")
        
        entities = crypto_utils.extract_crypto_entities(message)
        logger.info(f"Extracted entities: {entities}")
        
        # Respond based on extracted entities
        if entities['tokens']:
            token_list = ", ".join(entities['tokens'])
            dispatcher.utter_message(text=f"T√¥i th·∫•y b·∫°n ƒëang n√≥i v·ªÅ c√°c token: {token_list}")
        
        if entities['blockchains']:
            blockchain_list = ", ".join(entities['blockchains'])
            dispatcher.utter_message(text=f"Blockchain ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p: {blockchain_list}")
        
        if not entities['tokens'] and not entities['blockchains']:
            dispatcher.utter_message(text="T√¥i kh√¥ng ph√°t hi·ªán ƒë∆∞·ª£c token ho·∫∑c blockchain c·ª• th·ªÉ trong tin nh·∫Øn c·ªßa b·∫°n.")
        
        # Save to slots
        return [SlotSet("mentioned_tokens", entities['tokens']),
                SlotSet("mentioned_blockchains", entities['blockchains'])]